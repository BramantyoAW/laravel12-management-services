

# ====== /Users/macbookpro/Documents/pribadi/project/laravel12-management-services/app/GraphQL/default_schema.graphql ======
"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"Indicates what fields are available at the top level of a query operation."


type Auth {
  user: User!
  expires_in: Int!
  expired_status: Boolean!
}

"Account of a person who uses this application."
type User {
    "Unique primary key."
    id: ID!

    "Non-unique name."
    full_name: String!
    
    "Unique username."
    username: String!

    "Unique email address."
    email: String!

    "When the email was verified."
    email_verified_at: DateTime

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!
}


type PaginatedUser {
  data: [User!]!
  meta: PaginationMeta!
}

type PaginationMeta {
  pagination: Pagination!
}

type Pagination {
  total: Int!
  count: Int!
  per_page: Int!
  current_page: Int!
  total_pages: Int!
}

# ====== /Users/macbookpro/Documents/pribadi/project/laravel12-management-services/app/GraphQL/Queries/Auth/schema.graphql ======
type Auth {
  user: User!
  expires_in: Int!
  expired_status: Boolean!
}

type User {
    id: ID!
    full_name: String!
    
    "Unique username."
    username: String!

    "Unique email address."
    email: String!

    "When the email was verified."
    email_verified_at: DateTime

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!
}

# ====== /Users/macbookpro/Documents/pribadi/project/laravel12-management-services/app/GraphQL/Mutations/Login/schema.graphql ======
type AuthPayload {
  access_token: String!
  token_type: String!
  expires_in: Int!
  user: User!
}

# ====== /Users/macbookpro/Documents/pribadi/project/laravel12-management-services/app/GraphQL/Mutations/Logout/schema.graphql ======
type Response {
  status: Boolean!
  message: String!
}

type Query {

"Find a single user by an identifying attribute."
    user(
      "Search by primary key."
      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

      "Search by email address."
      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find @guard(with: ["api"])

    "List multiple users."
    users(
      "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
      name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)  @guard(with: ["api"])
me: Auth @guard(with: ["api"]) @field(resolver: "App\\GraphQL\\Queries\\Auth\\AuthQuery@me")
}

type Mutation {

login(email: String!, password: String!): AuthPayload! 
    @field(resolver: "App\\GraphQL\\Mutations\\Login\\Login@login")
logout(token: String!): Response! @field(resolver: "App\\GraphQL\\Mutations\\Logout\\Logout@logout")
}